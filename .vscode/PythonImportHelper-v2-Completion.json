[
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "day02.palindrome",
        "description": "day02.palindrome",
        "peekOfCode": "def isPalindrome(self, x):\n    if x < 0:\n        return False\n    else: \n        strX = str(x)\n        for i in range(0, len(strX)//2):\n            if (strX[i] != strX[len(strX)-i-1]):\n                return False\n        return True\nprint(isPalindrome(0, -101))",
        "detail": "day02.palindrome",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef mergeTwoLists(self, list1, list2):\n    ans =ListNode()\n    count = 0\n    while (list1 is not None and list2 is not None):\n        if list1.val < list2.val:\n            ans.val = list1.val",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "mergeTwoLists",
        "kind": 2,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "def mergeTwoLists(self, list1, list2):\n    ans =ListNode()\n    count = 0\n    while (list1 is not None and list2 is not None):\n        if list1.val < list2.val:\n            ans.val = list1.val\n            list1 = list1.next\n        elif list1.val >= list2.val:\n            ans.val = list2.val\n            list2 = list2.next",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node1",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node1 = ListNode(1)\nnode2 = ListNode(3)\nnode3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node2",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node2 = ListNode(3)\nnode3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node3",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node1.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node2.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node4",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node5",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node6",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node4.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node5.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "removeDuplicates",
        "kind": 2,
        "importPath": "day05.removeDuplicate",
        "description": "day05.removeDuplicate",
        "peekOfCode": "def removeDuplicates(self, nums):\n    # i = 0\n    # while i < len(nums) - 1:\n    #     if nums[i] == nums[i + 1]:\n    #         del nums[i]\n    #     else:\n    #         i += 1\n    # return len(nums)\n    count = 1\n    for i in range( 1, len(nums)):",
        "detail": "day05.removeDuplicate",
        "documentation": {}
    },
    {
        "label": "removeElement",
        "kind": 2,
        "importPath": "day06.removeElement",
        "description": "day06.removeElement",
        "peekOfCode": "def removeElement(self, nums, val):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] != val:\n            nums[count] = nums[i]\n            count += 1\n    return count",
        "detail": "day06.removeElement",
        "documentation": {}
    },
    {
        "label": "strStr",
        "kind": 2,
        "importPath": "day07.firstOccured",
        "description": "day07.firstOccured",
        "peekOfCode": "def strStr(self, haystack, needle):\n    if (len(needle) > len(haystack)) :\n        return -1\n    for i in range (0, len(haystack) - len(needle) +1) :\n        if (haystack[i : i + len(needle)] == needle):\n            return i\n    return -1",
        "detail": "day07.firstOccured",
        "documentation": {}
    },
    {
        "label": "searchInsert",
        "kind": 2,
        "importPath": "day08.insertPosition",
        "description": "day08.insertPosition",
        "peekOfCode": "def searchInsert(self, nums, target):\n    start = 0;\n    end = len(nums) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            start = mid + 1\n        else:",
        "detail": "day08.insertPosition",
        "documentation": {}
    },
    {
        "label": "lengthOfLastWord",
        "kind": 2,
        "importPath": "day09.lastWordLength",
        "description": "day09.lastWordLength",
        "peekOfCode": "def lengthOfLastWord(self, s):\n    s = s.strip()\n    return len(s.split(' ')[-1])\nprint(lengthOfLastWord(0, \"   fly me   to   the moon  \"))",
        "detail": "day09.lastWordLength",
        "documentation": {}
    },
    {
        "label": "plusOne",
        "kind": 2,
        "importPath": "day10.plusOne",
        "description": "day10.plusOne",
        "peekOfCode": "def plusOne(self, digits):\n    res = 0\n    for i in range (0, len(digits)):\n        res = res*10 + digits[i]\n    res +=1\n    list_of_digits = [int(i) for i in str(res)]\nplusOne(0, [9,9])",
        "detail": "day10.plusOne",
        "documentation": {}
    },
    {
        "label": "addBinary",
        "kind": 2,
        "importPath": "day11.addBinary",
        "description": "day11.addBinary",
        "peekOfCode": "def addBinary(self, a, b):\n    s= []\n    a_index = len(a) - 1\n    b_index = len(b) - 1\n    carry = 0\n    while a_index >= 0 or b_index >= 0 or carry == 1:\n        if (a_index >= 0):\n            carry += int(a[a_index])\n            a_index -= 1\n        if (b_index >= 0):",
        "detail": "day11.addBinary",
        "documentation": {}
    },
    {
        "label": "climbStairs",
        "kind": 2,
        "importPath": "day12.climbStair",
        "description": "day12.climbStair",
        "peekOfCode": "def climbStairs(self, n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = 1",
        "detail": "day12.climbStair",
        "documentation": {}
    },
    {
        "label": "mySqrt",
        "kind": 2,
        "importPath": "day12.sqrtX",
        "description": "day12.sqrtX",
        "peekOfCode": "def mySqrt(self, x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    left = 1",
        "detail": "day12.sqrtX",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "day13.removeDuplicateSortedListed",
        "description": "day13.removeDuplicateSortedListed",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef deleteDuplicates(self, head):\n    if not head:\n        return head\n    cur = head\n    while cur.next:\n        if cur.val == cur.next.val:",
        "detail": "day13.removeDuplicateSortedListed",
        "documentation": {}
    },
    {
        "label": "deleteDuplicates",
        "kind": 2,
        "importPath": "day13.removeDuplicateSortedListed",
        "description": "day13.removeDuplicateSortedListed",
        "peekOfCode": "def deleteDuplicates(self, head):\n    if not head:\n        return head\n    cur = head\n    while cur.next:\n        if cur.val == cur.next.val:\n            cur.next = cur.next.next\n        else:\n            cur = cur.next\n    return head",
        "detail": "day13.removeDuplicateSortedListed",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "day14.mergetwoSortedList",
        "description": "day14.mergetwoSortedList",
        "peekOfCode": "def merge(self, nums1, m, nums2, n):\n    index1 = m - 1\n    index2 = n - 1\n    index = m + n - 1\n    while (index1 >= 0 and index2 >= 0):\n        if (nums1[index1] < nums2[index2]):\n            nums1[index] = nums2[index2]\n            index2 -= 1\n            index -= 1\n        else:",
        "detail": "day14.mergetwoSortedList",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "interview-training.removeNode",
        "description": "interview-training.removeNode",
        "peekOfCode": "class ListNode:\n    def __init__ (self, val = 0, next = None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def removeNode(self, node):\n        while (node.next is not None):\n            node.val = node.next.val\n            if (node.next.next is None):\n                node.next = None",
        "detail": "interview-training.removeNode",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "interview-training.removeNode",
        "description": "interview-training.removeNode",
        "peekOfCode": "class Solution:\n    def removeNode(self, node):\n        while (node.next is not None):\n            node.val = node.next.val\n            if (node.next.next is None):\n                node.next = None\n            else:\n                node = node.next\nif __name__ == \"__main__\":\n    node1 = ListNode(1)",
        "detail": "interview-training.removeNode",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "interview-training.removeNodeIndex",
        "description": "interview-training.removeNodeIndex",
        "peekOfCode": "class ListNode:\n    def __init__ (self, val = 0, next = None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head, n):\n        if (head is None):\n            return head\n        if (head.next is None):\n            return None",
        "detail": "interview-training.removeNodeIndex",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "interview-training.removeNodeIndex",
        "description": "interview-training.removeNodeIndex",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head, n):\n        if (head is None):\n            return head\n        if (head.next is None):\n            return None\n        current = head\n        length = 0\n        while(current.next is not None):\n            current = current.next",
        "detail": "interview-training.removeNodeIndex",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "interview-training.reverseInt",
        "description": "interview-training.reverseInt",
        "peekOfCode": "def reverse(self, x):\n    INT_MAX = 2**31 - 1\n    INT_MIN = -2**31\n    isNegative = False\n    y = 0\n    if (x < 0):\n        isNegative = True\n        x = x * -1\n    while (x > 0):\n        lastDigit = x % 10",
        "detail": "interview-training.reverseInt",
        "documentation": {}
    },
    {
        "label": "reverseString",
        "kind": 2,
        "importPath": "interview-training.reverseString",
        "description": "interview-training.reverseString",
        "peekOfCode": "def reverseString(self, s):\n    for i in range (0, len(s)//2):\n        s[i], s[len(s)-i-1] = s[len(s)-i-1], s[i]\n    return s\nprint(reverseString(0, [\"h\",\"e\",\"l\",\"l\",\"o\"]))",
        "detail": "interview-training.reverseString",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "interview-training.reverstListNode",
        "description": "interview-training.reverstListNode",
        "peekOfCode": "class ListNode:\n    def __init__ (self, val = 0, next = None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def reverseList(self, head):\n        if head == None or head.next == None:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head",
        "detail": "interview-training.reverstListNode",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "interview-training.reverstListNode",
        "description": "interview-training.reverstListNode",
        "peekOfCode": "class Solution:\n    def reverseList(self, head):\n        if head == None or head.next == None:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\nif __name__ == \"__main__\":\n    node1 = ListNode(1)",
        "detail": "interview-training.reverstListNode",
        "documentation": {}
    },
    {
        "label": "longestCommonPrefix",
        "kind": 2,
        "importPath": "commonPrefix",
        "description": "commonPrefix",
        "peekOfCode": "def longestCommonPrefix(self, strs) -> str:\n    strs.sort()\n    smallStr = strs[0]\n    bigStr = strs[-1]\n    ans = \"\"\n    for i in range (min(len(smallStr), len(bigStr))):\n        if (smallStr[i] != bigStr[i]):\n            return ans\n        ans += smallStr[i]\n    return ans",
        "detail": "commonPrefix",
        "documentation": {}
    },
    {
        "label": "twoSum",
        "kind": 2,
        "importPath": "two_sum_day1",
        "description": "two_sum_day1",
        "peekOfCode": "def twoSum(self, nums, target):\n    numMap = {}\n    n = len(nums)\n    for i in range(n):\n        numMap[nums[i]] = i\n    print (numMap)\n    for i in range(n):\n        complement = target - nums[i]\n        if complement in numMap and numMap[complement] != i:\n            return [i, numMap[complement]]",
        "detail": "two_sum_day1",
        "documentation": {}
    }
]