[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "day02.palindrome",
        "description": "day02.palindrome",
        "peekOfCode": "def isPalindrome(self, x):\n    if x < 0:\n        return False\n    else: \n        strX = str(x)\n        for i in range(0, len(strX)//2):\n            if (strX[i] != strX[len(strX)-i-1]):\n                return False\n        return True\nprint(isPalindrome(0, -101))",
        "detail": "day02.palindrome",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef mergeTwoLists(self, list1, list2):\n    ans =ListNode()\n    count = 0\n    while (list1 is not None and list2 is not None):\n        if list1.val < list2.val:\n            ans.val = list1.val",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "mergeTwoLists",
        "kind": 2,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "def mergeTwoLists(self, list1, list2):\n    ans =ListNode()\n    count = 0\n    while (list1 is not None and list2 is not None):\n        if list1.val < list2.val:\n            ans.val = list1.val\n            list1 = list1.next\n        elif list1.val >= list2.val:\n            ans.val = list2.val\n            list2 = list2.next",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node1",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node1 = ListNode(1)\nnode2 = ListNode(3)\nnode3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node2",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node2 = ListNode(3)\nnode3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node3",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node3 = ListNode(4)\nnode1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node1.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node1.next = node2\nnode2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node2.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node2.next = node3\nnode4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node4",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node4 = ListNode(1)\nnode5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node5",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node5 = ListNode(2)\nnode6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node6",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node6 = ListNode(4)\nnode4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node4.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node4.next = node5\nnode5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "node5.next",
        "kind": 5,
        "importPath": "day04.mergeTwoList",
        "description": "day04.mergeTwoList",
        "peekOfCode": "node5.next = node6\nif __name__ == \"__main__\":\n    print(mergeTwoLists(0, node1, node4))",
        "detail": "day04.mergeTwoList",
        "documentation": {}
    },
    {
        "label": "removeDuplicates",
        "kind": 2,
        "importPath": "day05.removeDuplicate",
        "description": "day05.removeDuplicate",
        "peekOfCode": "def removeDuplicates(self, nums):\n    # i = 0\n    # while i < len(nums) - 1:\n    #     if nums[i] == nums[i + 1]:\n    #         del nums[i]\n    #     else:\n    #         i += 1\n    # return len(nums)\n    count = 1\n    for i in range( 1, len(nums)):",
        "detail": "day05.removeDuplicate",
        "documentation": {}
    },
    {
        "label": "longestCommonPrefix",
        "kind": 2,
        "importPath": "commonPrefix",
        "description": "commonPrefix",
        "peekOfCode": "def longestCommonPrefix(self, strs) -> str:\n    strs.sort()\n    smallStr = strs[0]\n    bigStr = strs[-1]\n    ans = \"\"\n    for i in range (min(len(smallStr), len(bigStr))):\n        if (smallStr[i] != bigStr[i]):\n            return ans\n        ans += smallStr[i]\n    return ans",
        "detail": "commonPrefix",
        "documentation": {}
    },
    {
        "label": "twoSum",
        "kind": 2,
        "importPath": "two_sum_day1",
        "description": "two_sum_day1",
        "peekOfCode": "def twoSum(self, nums, target):\n    numMap = {}\n    n = len(nums)\n    for i in range(n):\n        numMap[nums[i]] = i\n    print (numMap)\n    for i in range(n):\n        complement = target - nums[i]\n        if complement in numMap and numMap[complement] != i:\n            return [i, numMap[complement]]",
        "detail": "two_sum_day1",
        "documentation": {}
    }
]